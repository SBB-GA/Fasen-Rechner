---
interface Props {
  label: string;
  identifier: string;
  disabled?: boolean;
}

const { label, identifier, disabled = false } = Astro.props;
---

<number-input data-identifier={identifier} class="w-full">
  <div class="">
    <p class=`text-black font-extralight`>{label}:</p>
    <input
      type="text"
      name={identifier}
      id={identifier}
      {disabled}
      class=`w-full border-2 py-2 pl-3 pr-10 text-left shadow-md focus:outline-none ${disabled ? "bg-gray-200 border-gray-600 text-gray-700" : "border-black text-black"}`
    />
  </div>
</number-input>

<script>
  class Input extends HTMLElement {
    constructor() {
      super();
      function formatNumber() {
        var numberInput = document.getElementById(
          `${identifier}`,
        ) as HTMLInputElement;
        var value = numberInput.value;
        var regex = /^(\d+)(?!\.\d+)$/;

        if (regex.test(value)) {
          // If the value matches the regex, format it by adding ".0"
          var formattedValue = value.replace(regex, "$1.0");
          numberInput.value = formattedValue;
        } else {
          // If the value does not match the regex, try to parse it as a float and format it
          var number = parseFloat(value);
          if (isNaN(number)) {
            // Reset the input field if it's not a valid number
            numberInput.value = "";
          }
        }
      }

      const identifier = this.dataset.identifier;
      document
        .getElementById(`${identifier}`)
        .addEventListener("blur", formatNumber);
      document.getElementById(`${identifier}`).addEventListener("format_number_input", formatNumber);
    }
  }
  customElements.define("number-input", Input);
</script>
