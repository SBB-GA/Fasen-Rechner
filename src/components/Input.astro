---
interface Props {
  label: string;
  identifier: string;
  disabled?: boolean;
}

const { label, identifier, disabled = false } = Astro.props;
---

<number-input data-identifier={identifier} class="w-full">
  <div class="">
    <p class=`text-black font-extralight`>{label}:</p>
    <input
      type="text"
      name={identifier}
      id={identifier}
      {disabled}
      class=`w-full border-2 py-2 pl-3 pr-10 text-left shadow-md focus:outline-none ${disabled ? "bg-gray-200 border-gray-600 text-gray-700" : "border-black text-black"}`
    />
  </div>
</number-input>

<script>
  class Input extends HTMLElement {
    constructor() {
      super();
      function formatNumber() {
        let numberInput = document.getElementById(
          `${identifier}`,
        ) as HTMLInputElement;
        let valueIn = numberInput.value;
        if (valueIn == "") {
          return
        }
        let valueInArray = valueIn.split(".")
        if (valueInArray.length > 2) {
          alert("invalid input")
          numberInput.value = ""
          return
        }
        // Check if number is whole number
        // Cases ["1"], ["1", ""], ["1", "0"]
        if (valueInArray.length == 1 || valueInArray[1] == "" || parseFloat(valueInArray[1]) == 0) {
          // Append one .0
          numberInput.value = `${valueInArray[0]}.0`
          return
        }

        numberInput.value = `${parseFloat(parseFloat(valueIn).toFixed(3))}`
      }

      const identifier = this.dataset.identifier;
      document
        .getElementById(`${identifier}`)
        .addEventListener("blur", formatNumber);
      document.getElementById(`${identifier}`).addEventListener("format_number_input", formatNumber);
    }
  }
  customElements.define("number-input", Input);
</script>
