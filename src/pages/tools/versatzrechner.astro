---
import Layout from "../../layouts/Layout.astro";
import Body from "../../components/Body.astro";
import HomeButton from "../../components/HomeButton.astro";

import VersatzrechnerContent from "../../apps/VersatzrechnerContent";
---

<Layout title="Versatzrechner">
  <Body>
    <HomeButton />
    <VersatzrechnerContent client:load />
  </Body>
</Layout>

<script>
  function enableInput(input: HTMLInputElement) {
    input.disabled = false;
    input.className =
      "w-full border-2 py-2 pl-3 pr-10 text-left shadow-md focus:outline-none bg-white border-black text-black";
  }
  function disableInput(input: HTMLInputElement) {
    input.disabled = true;
    input.value = "";
    input.className =
      "w-full border-2 py-2 pl-3 pr-10 text-left shadow-md focus:outline-none bg-gray-200 border-gray-600 text-gray-700";
  }

  // Tool Properties
  // Tool Type
  let tool_type = document.getElementsByName(
    "tool_type[name]",
  )[0] as HTMLInputElement; // just take the first element to stop error messages as getElementsByName can return a list, however we make sure to only use each name once"

  // Number Inputs for tool
  let d1 = document.getElementById("d1") as HTMLInputElement;
  let d2 = document.getElementById("d2") as HTMLInputElement;
  let d3 = document.getElementById("d3") as HTMLInputElement;

  let l1 = document.getElementById("l1") as HTMLInputElement;
  let l2 = document.getElementById("l2") as HTMLInputElement;
  let l3 = document.getElementById("l3") as HTMLInputElement;

  let a1 = document.getElementById("a1") as HTMLInputElement;
  let a2 = document.getElementById("a2") as HTMLInputElement;

  // Disable / Enable all the input for tool_type
  tool_type.addEventListener("tool_type_change", () => {
    setTimeout(() => {
      // gfallt mer zwar ned die lösig, aber sie funktioniert. sProblem isch dass element.value retrieved wird bevor sDOM upgdated isch und drum es Timeout hilft
      let element = document.getElementsByName(
        "tool_type[name]",
      )[0] as HTMLInputElement;
      if (element.value === "Fasenfräser") {
        enableInput(d1);
        enableInput(d2);
        disableInput(d3);
        enableInput(l1);
        disableInput(l2);
        disableInput(l3);
        enableInput(a1);
        disableInput(a2);
      } else if (element.value === "Kombientgrater") {
        enableInput(d1);
        enableInput(d2);
        enableInput(d3);
        enableInput(l1);
        enableInput(l2);
        enableInput(l3);
        enableInput(a1);
        enableInput(a2);
      } else if (element.value === "Schwalbenschwanz") {
        enableInput(d1);
        disableInput(d2);
        enableInput(d3);
        enableInput(l1);
        disableInput(l2);
        enableInput(l3);
        disableInput(a1);
        enableInput(a2);
      } else {
        alert("tool_type undefined");
      }
    }, 0);
  });

  // initialize the fields
  tool_type.dispatchEvent(new Event("tool_type_change"));

  // Chamfer Properties
  let ca = document.getElementById("Ca") as HTMLInputElement;
  let cr = document.getElementById("Cr") as HTMLInputElement;
  let oa = document.getElementById("Oa") as HTMLInputElement;
  let or = document.getElementById("Or") as HTMLInputElement;

  let chamfer_type = document.getElementsByName(
    "chamfer_type[name]",
  )[0] as HTMLInputElement;
  let offset_type = document.getElementsByName(
    "offset_type[name]",
  )[0] as HTMLInputElement;

  // recalculate once any of the fields change
  chamfer_type.addEventListener("chamfer_type_change", () => {
    setTimeout(() => {
      ca.dispatchEvent(new Event("blur"));
      oa.dispatchEvent(new Event("blur"));
      updateChamfer();
    }, 0);
  });
  offset_type.addEventListener("offset_type_change", () => {
    setTimeout(() => {
      updateChamfer();
    }, 0);
  });

  // eventlistener chamfer inputs
  // onblur --> update the other field
  // --> update chamfer
  ca.addEventListener("blur", () => {
    // update chamfer radial
    // only need to do the calculation when the values actually changed
    // the trickery with all the parseFloat and stuff needs to be done to satisfy the typescript lsp (mimimi comparing string to number)
    setTimeout(() => {
      const angle = chamfer_type.value == "Regulär" ? a1 : a2;
      console.debug("Event 'Blur' caught on 'Ca'");
      if (parseFloat(ca.dataset.precise).toFixed(3) != ca.value) {
        const a1_rad = (parseFloat(angle.value) * Math.PI) / 180;
        const ca_value = ca.value;
        const value = parseFloat(ca_value) * Math.tan(a1_rad / 2);
        if (!isNaN(value)) {
          cr.value = `${value.toFixed(3)}`;
          cr.dataset.precise = value.toString();
          ca.dispatchEvent(new Event("format_number_input"));
          cr.dispatchEvent(new Event("format_number_input"));
          updateChamfer();
        }
      }
    }, 0);
  });
  cr.addEventListener("blur", () => {
    // update chamfer radial
    setTimeout(() => {
      const angle = chamfer_type.value == "Regulär" ? a1 : a2;
      console.debug("Event 'Blur' caught on 'Cr'");
      if (parseFloat(cr.dataset.precise).toFixed(3) != cr.value) {
        const a1_rad = (parseFloat(angle.value) * Math.PI) / 180;
        const cr_value = cr.value;
        const value = parseFloat(cr_value) / Math.tan(a1_rad / 2);
        if (!isNaN(value)) {
          ca.value = `${value.toFixed(3)}`;
          ca.dataset.precise = value.toString();
          ca.dispatchEvent(new Event("format_number_input"));
          cr.dispatchEvent(new Event("format_number_input"));
          updateChamfer();
        }
      }
    }, 0);
  });

  oa.addEventListener("blur", () => {
    // update chamfer radial
    // only need to do the calculation when the values actually changed
    // the trickery with all the parseFloat and stuff needs to be done to satisfy the typescript lsp (mimimi comparing string to number)
    setTimeout(() => {
      const angle = chamfer_type.value == "Regulär" ? a1 : a2;
      console.debug("Event 'Blur' caught on 'Oa'");
      if (parseFloat(oa.dataset.precise).toFixed(3) != oa.value) {
        const a1_rad = (parseFloat(angle.value) * Math.PI) / 180;
        const oa_value = oa.value;
        const value = parseFloat(oa_value) * Math.tan(a1_rad / 2);
        if (!isNaN(value)) {
          or.value = `${value.toFixed(3)}`;
          or.dataset.precise = value.toString();
          oa.dispatchEvent(new Event("format_number_input"));
          or.dispatchEvent(new Event("format_number_input"));
          updateChamfer();
        }
      }
    }, 0);
  });

  or.addEventListener("blur", () => {
    // update chamfer radial
    setTimeout(() => {
      const angle = chamfer_type.value == "Regulär" ? a1 : a2;
      console.debug("Event 'Blur' caught on 'Or'");
      if (parseFloat(or.dataset.precise).toFixed(3) != or.value) {
        const a1_rad = (parseFloat(angle.value) * Math.PI) / 180;
        const or_value = or.value;
        const value = parseFloat(or_value) / Math.tan(a1_rad / 2);
        if (!isNaN(value)) {
          oa.value = `${value.toFixed(3)}`;
          oa.dataset.precise = value.toString();
          oa.dispatchEvent(new Event("format_number_input"));
          or.dispatchEvent(new Event("format_number_input"));
          updateChamfer();
        }
      }
    }, 0);
  });

  // when tool angles change update radial and axial chamfer / offsets
  a1.addEventListener("blur", () => {
    ca.dispatchEvent(new Event("blur"));
    cr.dispatchEvent(new Event("blur"));
    oa.dispatchEvent(new Event("blur"));
    or.dispatchEvent(new Event("blur"));
  });
  a2.addEventListener("blur", () => {
    ca.dispatchEvent(new Event("blur"));
    cr.dispatchEvent(new Event("blur"));
    oa.dispatchEvent(new Event("blur"));
    or.dispatchEvent(new Event("blur"));
  });

  function updateChamfer() {
    // these values would need to be retrieved from the actual inputs
    // Number Inputs for tool

    const retrieveValue = (id: string) => {
      const value = parseFloat(
        (document.getElementById(id) as HTMLInputElement).value,
      );
      return isNaN(value) ? 0 : value;
    };

    const d1 = retrieveValue("d1");
    const d2 = retrieveValue("d2");
    const d3 = retrieveValue("d3");

    const l1 = retrieveValue("l1");
    const l2 = retrieveValue("l2");
    // const l3 = retrieveValue("l3")
    //
    // const a1 = parseFloat(
    //   (document.getElementById("a1") as HTMLInputElement).value,
    // );
    // const a2 = parseFloat(
    //   (document.getElementById("a2") as HTMLInputElement).value,
    // );

    // here we need to do some trickery to calculate the radial / axial components based on whats entered
    const ca = retrieveValue("Ca");
    const cr = retrieveValue("Cr");
    const oa = retrieveValue("Oa");
    const or = retrieveValue("Or");

    const chamfer_type = (
      document.getElementsByName("chamfer_type[name]")[0] as HTMLInputElement
    ).value;
    const offset_type = (
      document.getElementsByName("offset_type[name]")[0] as HTMLInputElement
    ).value;

    // output variables
    let wall_offset: number;
    let floor_offset: number;

    // case distinction
    if (chamfer_type == "Regulär") {
      if (offset_type == "Oberseite") {
        // some meth
        wall_offset = -(cr + or);
        floor_offset = l2 != 0 ? -(l2 - oa) : - (l1 - oa);
      } else if (offset_type == "Unterseite") {
        wall_offset = -(d1 / 2 - d2 / 2 - or);
        floor_offset = -(ca + oa);
      } else {
        alert("Something went wrong 1000");
      }
    } else if (chamfer_type == "Rückwärts") {
      // some other meth
      // TODO: seems to work for Fasenfräser and Kombi, not for Schwalbenschwanz
      if (offset_type == "Oberseite") {
        // TODO: Add the stump into calculation
        wall_offset = -(d1 / 2 - d3 / 2 - or);
        floor_offset = -(l1 - oa - ca);
      } else if (offset_type == "Unterseite") {
        // TODO: Add the stump into calculation
        wall_offset = -(cr + or);
        floor_offset = -(l2 + oa);
      } else {
        alert("Something went wrong 2000");
      }
    } else {
      alert("Something went wrong 3000");
    }

    const formatOutput = (value: number) => {
      if (value.toString() === "") {
        return;
      }

      const valueArray = value.toString().split(".");
      // needed to catch any anomalies which do not produce a correct number
      if (valueArray.length > 2) {
        return "";
      }

      if (
        valueArray.length === 1 ||
        valueArray[1] === "" ||
        parseFloat(valueArray[1]) === 0
      ) {
        return `${valueArray[0]}.0`;
      }

      return `${parseFloat(parseFloat(value.toString()).toFixed(3))}`;
    };

    document.getElementById("offset-wall").innerHTML =
      formatOutput(wall_offset);
    document.getElementById("offset-floor").innerHTML =
      formatOutput(floor_offset);
  }
</script>
